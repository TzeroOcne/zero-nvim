local zero = require("zero")

-- in your init.lua or a plugin file
vim.api.nvim_create_autocmd({ "VimEnter", "DirChanged" }, {
  callback = function()
    if zero.is_godot_project() then
      -- restart RPC server with a fixed name
      local cwd = vim.fn.getcwd()
      local hash = zero.simple_hash(cwd)
      local pipename = "\\\\.\\pipe\\nvim-godot." .. hash
      vim.fn.serverstart(pipename)
      vim.notify("Started Godot RPC server: " .. pipename, vim.log.levels.INFO, { title = "nryy" })

      -- batch file content
      local bat_content = ([[@echo off
REM Auto-generated by Neovim
set NVIM_SERVER=%s
nvim --server %%NVIM_SERVER%% --remote %%*
]]):format(pipename)

      -- write to cwd/nvim-remote.bat
      local bat_path = cwd .. "\\nvim-remote.bat"
      local f = io.open(bat_path, "w")
      if f then
        f:write(bat_content)
        f:close()
        vim.notify("Created " .. bat_path, vim.log.levels.INFO)
      else
        vim.notify("Failed to create batch file in " .. cwd, vim.log.levels.ERROR)
      end
    end
  end,
})

vim.api.nvim_create_autocmd("FileType", {
  pattern = "dbout",
  callback = function()
    local win = vim.api.nvim_get_current_win()
    vim.wo[win][0].cursorline = true
    vim.api.nvim_set_hl(0, "CursorLine", { underline = true })
    vim.api.nvim_buf_set_keymap(0, "n", "<M-h>", "zh", { noremap = true, silent = true })
    vim.api.nvim_buf_set_keymap(0, "n", "<M-l>", "zl", { noremap = true, silent = true })
  end,
})

vim.api.nvim_create_autocmd("FileType", {
  pattern = "gitcommit",
  callback = function()
    vim.opt.statuscolumn = ""
  end,
})

vim.api.nvim_create_autocmd("FileType", {
  pattern = "lazy",
  callback = function()
    local win = vim.api.nvim_get_current_win()
    vim.wo[win][0].cursorline = true
    vim.api.nvim_set_hl(0, "CursorLine", { underline = true })
  end,
})

vim.api.nvim_create_autocmd("FileType", {
  pattern = { "autohotkey" },
  callback = function ()
    vim.bo.commentstring = "; %s"
  end
})

vim.api.nvim_create_autocmd("FileType", {
  pattern = { "sql" },
  callback = function ()
    vim.bo.commentstring = "-- %s"
  end
})

vim.api.nvim_create_autocmd("FileType", {
  pattern = { "typescript" },
  callback = function ()
    vim.bo.commentstring = "// %s"
  end
})

-- close some filetypes with <q>
vim.api.nvim_create_autocmd("FileType", {
  pattern = {
    "PlenaryTestPopup",
    "grug-far",
    "help",
    "lspinfo",
    "notify",
    "qf",
    "spectre_panel",
    "startuptime",
    "tsplayground",
    "neotest-output",
    "checkhealth",
    "neotest-summary",
    "neotest-output-panel",
    "dbout",
    "gitsigns-blame",
  },
  callback = function(event)
    vim.bo[event.buf].buflisted = false
    vim.keymap.set("n", "q", "<cmd>close<cr>", {
      buffer = event.buf,
      silent = true,
      desc = "Quit buffer",
    })
  end,
})

vim.api.nvim_create_autocmd({"BufRead", "BufNewFile"}, {
  pattern = ".env*",
  callback = function()
    vim.bo.filetype = "config"
  end,
})

local client;

vim.api.nvim_create_autocmd("FileType", {
  pattern = "autoit",
  callback = function()
    if not client then
      client = vim.lsp.start_client {
        name = "AutoIt LSP",
        cmd = { os.getenv('HOME') .. "\\Project\\autoit-ls\\zig-out\\bin\\autoit-ls.exe" },
      }
    end
    if client then
      vim.lsp.buf_attach_client(0, client)
    end
  end,
})

-- Autocommand to set tabstop and shiftwidth when opening markdown files in .obsidian projects
vim.api.nvim_create_autocmd("FileType", {
  pattern = "markdown",
  callback = function()
    if require('zero').is_obsidian_project() then
      vim.bo.tabstop = 2
      vim.bo.shiftwidth = 2
    end
  end,
})
